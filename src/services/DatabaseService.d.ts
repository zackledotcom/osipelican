import { EventEmitter } from 'events';
import { z } from 'zod';
declare const MessageSchema: any;
declare const ConversationSchema: any;
declare const MemorySchema: any;
export type Message = z.infer<typeof MessageSchema>;
export type Conversation = z.infer<typeof ConversationSchema>;
export type Memory = z.infer<typeof MemorySchema>;
export declare class DatabaseService extends EventEmitter {
    private static instance;
    private chatDb;
    private memoryDb;
    private migrationManager;
    private isInitialized;
    private readonly BACKUP_DIR;
    private readonly MAX_BACKUPS;
    private constructor();
    static getInstance(): DatabaseService;
    initialize(): Promise<void>;
    private createTables;
    saveMessage(message: Message): Promise<void>;
    getMessages(conversationId: string): Promise<Message[]>;
    createConversation(conversation: Conversation): Promise<void>;
    getConversations(): Promise<Conversation[]>;
    saveMemory(memory: Memory): Promise<void>;
    getMemories(limit?: number): Promise<Memory[]>;
    createBackup(): Promise<string>;
    restoreFromBackup(backupPath: string): Promise<void>;
    private cleanupOldBackups;
    cleanup(): Promise<void>;
}
export {};
